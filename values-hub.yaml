clusterGroup:
  name: hub
  isHubCluster: true

  # Let the VP framework create namespaces 
  # See the following blog for more info: https://validatedpatterns.io/blog/2023-12-15-understanding-namespaces/
  namespaces:
    - open-cluster-management:
    - vault:
    - golang-external-secrets:
    # Required RHOSO namespaces for prereq operators
    - cert-manager-operator:
      operatorGroup: true
      targetNamespaces:
        - cert-manager-operator
    - metallb-system:
    - openshift-nmstate:
      operatorGroup: true
      annotations:
        olm.providedAPIs: NMState.v1.nmstate.io
      labels:
        kubernetes.io/metadata.name: openshift-nmstate
      targetNamespaces:
        - openshift-nmstate


  subscriptions:
    # Required RHOSO Subscriptions
    #
    # cert-manager-operator, nmstate, metallb
    #
    cert-manager-operator:
      name: openshift-cert-manager-operator
      namespace: cert-manager-operator
      labels:
        operators.coreos.com/openshift-cert-manager-operator.cert-manager-operator: ""
      channel: stable-v1
      installPlanApproval: Automatic
      sourc: redhat-operators

    metallb-operator:
      name: metallb-operator
      namespace: metallb-system
      channel: stable
      source: redhat-operators

    nmstate-operator:
      name: kubernetes-nmstate-operator
      namespace: openshift-nmstate
      labels:
        operators.coreos.com/kubernetes-nmstate-operator.openshift-nmstate: ""
      channel: stable
      installPlanApproval: Automatic
      source: redhat-operators 


  projects:
    - cluster-services
    - rhoso-cluster

  # Explicitly mention the cluster-state based overrides we plan to use for this pattern.
  # We can use self-referential variables because the chart calls the tpl function with these variables defined
  sharedValueFiles:
    - '/overrides/values-{{ $.Values.global.clusterPlatform }}.yaml'
  # sharedValueFiles is a flexible mechanism that will add the listed valuefiles to every app defined in the
  # applications section. We intend this to supplement and possibly even replace previous "magic" mechanisms, though
  # we do not at present have a target date for removal.
  #
  # To replicate the "classic" magic include structure, the clusterGroup would need all of these
  # sharedValueFiles, in this order:
  #   - '/overrides/values-{{ $.Values.global.clusterPlatform }}.yaml'
  #   - '/overrides/values-{{ $.Values.global.clusterPlatform }}-{{ $.Values.global.clusterVersion }}.yaml'
  #   - '/overrides/values-{{ $.Values.global.clusterPlatform }}-{{ $.Values.clusterGroup.name }}.yaml'
  #   - '/overrides/values-{{ $.Values.global.clusterVersion }}-{{ $.Values.clusterGroup.name }}.yaml"
  #   - '/overrides/values-{{ $.Values.global.localClusterName }}.yaml'

  # This kind of variable substitution will work with any of the variables the Validated Patterns operator knows
  # about and sets, so this is also possible, for example:
  #   - '/overrides/values-{{ $.Values.global.hubClusterDomain }}.yaml'
  #   - '/overrides/values-{{ $.Values.global.localClusterDomain }}.yaml'
  applications:
    vault:
      name: vault
      namespace: vault
      project: cluster-services
      chart: hashicorp-vault
      chartVersion: 0.1.*
    golang-external-secrets:
      name: golang-external-secrets
      namespace: golang-external-secrets
      project: cluster-services
      chart: golang-external-secrets
      chartVersion: 0.1.*

    # RHOSO Prereq operator config helm charts
    nmstate-config:
      name: nmstate-config
      namespace: openshift-nmstate
      project: rhoso-cluster
      path: charts/rhoso-prereqs/nmstate-config

    metallb-config:
      name: metallb-config
      namespace: metallb-system
      project: rhoso-cluster
      path: charts/rhoso-prereqs/metallb-config

  imperative: {}
  managedClusterGroups: {}
